#!/usr/bin/env node
// vi:syntax=javascript

/*
 *  iotql
 *
 *  David Janes
 *  IOTDB.org
 *  2015-07-21
 *
 *  Interactive IoTQL 
 *
 *  Copyright [2013-2014] [David P. Janes]
 *  
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  
 *     http://www.apache.org/licenses/LICENSE-2.0
 *  
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

"use strict";

var iotdb = require('iotdb');
var iotdb_transport = require('iotdb-transport')
var _ = iotdb.helpers;
var cfg = iotdb.cfg;

var repl = require('repl');
var path = require('path');
var os = require('os');
var util = require('util');
var child_process = require('child_process');

var minimist = require('minimist');
var FSTransport = require('iotdb-transport-fs').Transport

var bunyan = require('bunyan');
var logger = bunyan.createLogger({
    name: 'iotql',
    module: 'iotql',
});

var parser = require("../grammar").parser;
var DB = require('../db').DB;

/* for minimist */
var boolean = [
    "sample",
];
var defaults = {};
var db;

var help = function() {
    console.log("usage: iotql");
    console.log("");
};

var iotql_eval = function(cmd, context, filename, callback) {
    var statements = parser.parse(cmd);

    var name = "";
    var resultds = [];
    db.execute(statements, function(cd) {
        if (cd.end) {
            callback(null, resultds);
        } else if (cd.start) {
            /*
            if (cd.index === 0) {
                child_process.spawnSync("rm", [ "-rf", "samples/.things" ]);
                child_process.spawnSync("cp", [ "-R", "samples/things", "samples/.things" ]);
            }
            */
        } else if (cd.error) {
            console.log("-- ERROR: %s", cd.error);
        } else if (cd.columns) {
            var rowdd = {};

            cd.columns.map(function(column, column_index) {
                if (column.value === null) {
                    return;
                }
                var rowd = {
                    value: column.value,
                };
                if (column.units) {
                    rowd.units = column.units;
                }

                rowdd[column.name] = rowd
            });

            resultds.push(rowdd);
        }
    });

};

var run_interactive = function() {
    repl.start({
        prompt: "iotql> ",
        eval: iotql_eval,
        writer: function(o) {
            return util.inspect(o, {showHidden: false, depth: null});
        },
    });
};

var run_cli = function()  {
    var ad = require('minimist')(process.argv.slice(2), {
        boolean: boolean,
        default: defaults,
    });

    var things_url = "iotdb://";
    var recipes_url = null;
    if (ad.sample) {
        var src_dir = path.join(__dirname, "..", "samples", "things");
        var dst_dir = path.join(os.tmpdir(), "iotql-things-" + _.uid(8));

        child_process.spawnSync("rm", [ "-rf", dst_dir ]);
        child_process.spawnSync("cp", [ "-R", src_dir, dst_dir ]);

        things_url = dst_dir;
    } else if (ad.things) {
        things_url = ad.things;
    }

    if (ad.recipes) {
        recipes_url = ad.recipes;
    }

    var things_transporter;
    var recipes_transporter;

    var connected = function() {
        if (things_transporter === undefined) {
            return;
        } else if (recipes_transporter === undefined) {
            return;
        }

        db = new DB(things_transporter, recipes_transporter);
        run_interactive();
    };

    iotdb_transport.connect(things_url, function(error, td) {
        if (error) {
            throw new Error(_.error.message(error));
        }

        things_transporter = td.transport;
        connected();
    });

    if (!recipes_url) {
        recipes_transporter = null;
        connected();
    } else {
        iotdb_transport.connect(recipes_url, function(error, td) {
            if (error) {
                throw new Error(_.error.message(error));
            }

            recipes_transporter = td.transport;
            connected();
        });
    }
};

run_cli();
