#!/usr/bin/env node
// vi:syntax=javascript

/*
 *  iotql
 *
 *  David Janes
 *  IOTDB.org
 *  2015-07-21
 *
 *  Interactive IoTQL 
 *
 *  Copyright [2013-2014] [David P. Janes]
 *  
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  
 *     http://www.apache.org/licenses/LICENSE-2.0
 *  
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

"use strict";

var iotdb = require('iotdb');
var iotdb_transport = require('iotdb-transport')
var _ = iotdb.helpers;
var cfg = iotdb.cfg;

var repl = require('repl');
var path = require('path');
var os = require('os');
var util = require('util');
var child_process = require('child_process');

var minimist = require('minimist');
var FSTransport = require('iotdb-transport-fs').Transport

var bunyan = require('bunyan');
var logger = bunyan.createLogger({
    name: 'iotql',
    module: 'iotql',
});

var iotql = require("iotdb-iotql");

var help = function() {
    console.log("usage: iotql");
    console.log("");
};

var run_interactive = function(ad, db) {
    var _iotql_eval = function(cmd, context, filename, callback) {
        var name = "";
        var resultds = [];
        db.execute(cmd, function(cd) {
            if (cd.end) {
                callback(null, resultds);
            } else if (cd.start) {
                /*
                if (cd.index === 0) {
                    child_process.spawnSync("rm", [ "-rf", "samples/.things" ]);
                    child_process.spawnSync("cp", [ "-R", "samples/things", "samples/.things" ]);
                }
                */
            } else if (cd.error) {
                console.log("-- ERROR: %s", cd.error);
            } else if (cd.columns) {
                var rowdd = {};

                cd.columns.map(function(column, column_index) {
                    if (column.value === null) {
                        return;
                    }
                    var rowd = {
                        value: column.value,
                    };
                    if (column.units) {
                        rowd.units = column.units;
                    }

                    rowdd[column.as] = rowd
                });

                resultds.push(rowdd);
            }
        });

    };

    var _iotql_writer = function(o) {
        if (ad.json) {
            return util.inspect(o, { depth: null });
        }

        o.map(function(d) {
            for (var key in d) {
                var valued = d[key];
                var value = valued.value;
                if (!_.is.String(value)) {
                    value = util.inspect(valued.value, { depth: null });
                }

                if (valued.units) {
                    console.log(util.format("%s %s %s", key, value, valued.units));
                } else {
                    console.log(util.format("%s %s", key, value));
                }
            }
            console.log();
        });
        return "";
    };

    repl.start({
        prompt: "iotql> ",
        eval: _iotql_eval,
        writer: _iotql_writer,
    })
    .on('exit', function() {
        process.exit(0)
    });
};

var run_cli = function()  {
    var ad = require('minimist')(process.argv.slice(2), {
        boolean: [ "samples", "json" ],
        default: {},
    });

    var connect_paramd = {};
    if (ad.samples) {
        var src_dir = path.join(__dirname, "..", "samples", "things");
        var dst_dir = path.join(os.tmpdir(), "iotql-things-" + _.uid(8));

        child_process.spawnSync("rm", [ "-rf", dst_dir ]);
        child_process.spawnSync("cp", [ "-R", src_dir, dst_dir ]);

        connect_paramd.things_url = dst_dir;
    } else if (ad.things) {
        connect_paramd.things_url = ad.things;
    }

    iotql.connect(connect_paramd, function(error, db) {
        if (error) {
            throw error;
        }

        run_interactive(ad, db);
    });
};

run_cli();
