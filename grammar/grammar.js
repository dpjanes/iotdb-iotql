/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,25],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[1,9],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[5,24],$Vb=[5,7,10,12,24,35,38],$Vc=[2,36],$Vd=[1,18],$Ve=[1,24],$Vf=[1,27],$Vg=[1,19],$Vh=[1,20],$Vi=[1,22],$Vj=[1,28],$Vk=[1,29],$Vl=[1,30],$Vm=[1,31],$Vn=[1,32],$Vo=[1,33],$Vp=[1,34],$Vq=[1,35],$Vr=[5,7,24],$Vs=[5,7,10,12,24,35],$Vt=[1,54],$Vu=[1,53],$Vv=[1,55],$Vw=[1,57],$Vx=[5,7,10,12,20,23,24,26,34,35,38,46,47,50,54],$Vy=[2,73],$Vz=[5,7,10,12,20,23,24,26,34,35,38,46,47,54],$VA=[2,70],$VB=[1,64],$VC=[5,7,12,24,34,35],$VD=[1,83],$VE=[1,85],$VF=[2,59],$VG=[20,54],$VH=[7,24],$VI=[1,110],$VJ=[20,35],$VK=[1,132],$VL=[5,7,24,35],$VM=[5,7,24,34];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"EXPRESSION-LIST":4,"EOF":5,"EXPRESSION":6,";":7,"SELECT":8,"SELECT-TERMS":9,"FROM":10,"SYMBOL-SIMPLE":11,"WHERE":12,"VALUE":13,"SET":14,"SET-TERMS":15,"UPDATE":16,"DO":17,"(":18,"PARAMETERS":19,")":20,"SYMBOL":21,"CREATE-SCENE":22,"BEGIN":23,"END":24,"LET":25,"=":26,"CREATE-TRIGGER":27,"CREATE-MODEL":28,"WITH":29,"ATTRIBUTES":30,"CONNECT-MODEL":31,"SIMPLE-SET-TERMS":32,"ONE-ATTRIBUTE":33,"ATTRIBUTE":34,",":35,"SELECT-TERM":36,"D-SYMBOL":37,"AS":38,"STAR":39,"SYMBOL-STAR":40,"P-SYMBOL":41,"SET-TERM":42,"ASSIGN-OPERATOR":43,"SIMPLE-SET-TERM":44,"LEFT-OPERATOR":45,"BI-OPERATOR":46,"LOGIC-OPERATOR":47,"LIST":48,"ATOMIC":49,"DECORATOR":50,"PARAMETER":51,"VALUES":52,"[":53,"]":54,"INTEGER":55,"NUMBER":56,"STRING":57,"BOOLEAN":58,"NULL":59,"ID":60,"VARIABLE":61,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:";",8:"SELECT",10:"FROM",11:"SYMBOL-SIMPLE",12:"WHERE",14:"SET",16:"UPDATE",17:"DO",18:"(",20:")",21:"SYMBOL",22:"CREATE-SCENE",23:"BEGIN",24:"END",25:"LET",26:"=",27:"CREATE-TRIGGER",28:"CREATE-MODEL",29:"WITH",31:"CONNECT-MODEL",34:"ATTRIBUTE",35:",",38:"AS",39:"STAR",40:"SYMBOL-STAR",43:"ASSIGN-OPERATOR",45:"LEFT-OPERATOR",46:"BI-OPERATOR",47:"LOGIC-OPERATOR",50:"DECORATOR",53:"[",54:"]",55:"INTEGER",56:"NUMBER",57:"STRING",58:"BOOLEAN",59:"NULL",60:"ID",61:"VARIABLE"},
productions_: [0,[3,2],[4,3],[4,1],[6,2],[6,4],[6,4],[6,6],[6,2],[6,4],[6,4],[6,6],[6,2],[6,5],[6,2],[6,5],[6,5],[6,8],[6,4],[6,7],[6,9],[6,5],[6,4],[6,2],[6,4],[6,0],[30,2],[30,1],[33,4],[9,3],[9,1],[36,1],[36,3],[36,4],[36,6],[36,1],[37,0],[37,1],[37,1],[41,1],[15,3],[15,1],[42,3],[42,3],[32,3],[32,1],[44,3],[44,3],[44,3],[13,2],[13,3],[13,3],[13,3],[13,4],[13,4],[13,3],[13,1],[13,1],[13,2],[19,0],[19,1],[19,3],[51,3],[51,4],[51,4],[51,3],[51,1],[51,1],[51,2],[48,3],[52,0],[52,1],[52,3],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            return this.$;
        
break;
case 2:
 
            this.$ = $$[$0-2].concat($$[$0]);
        
break;
case 3:
 
            this.$ = $$[$0]; 
        
break;
case 4:
 this.$ = [ { "select": $$[$0], "store": "things" } ]; 
break;
case 5:
 this.$ = [ { "select": $$[$0-2], "store": $$[$0].toLowerCase() } ]; 
break;
case 6:
 this.$ = [ { "select": $$[$0-2], "where": $$[$0], "store": "things" } ]; 
break;
case 7:
 this.$ = [ { "select": $$[$0-4], "store": $$[$0-2].toLowerCase(), "where": $$[$0] } ]; 
break;
case 8:
 this.$ = [ { "set": $$[$0], "store": "things" } ]; 
break;
case 9:
 this.$ = [ { "set": $$[$0], "store": $$[$0-2].toLowerCase() } ]; 
break;
case 10:
 this.$ = [ { "set": $$[$0-2], "where": $$[$0], "store": "things" } ]; 
break;
case 11:
 this.$ = [ { "set": $$[$0-2], "where": $$[$0], "store": $$[$0-4].toLowerCase() } ]; 
break;
case 12:

        this.$ = [
            {
                "do": $$[$0].toLowerCase(),
                "module": "scene",
                "operands": [],
            }
        ];
    
break;
case 13:

        this.$ = [
            {  
                "do": $$[$0-3].toLowerCase(),
                "module": "scene",
                "operands": $$[$0-1],
            }
        ];
    
break;
case 14:

        $$[$0] = $$[$0].toLowerCase();
        this.$ = [
            {
                "do": $$[$0].replace(/^[^.]*[:]/, ""),  
                "module": $$[$0].replace(/[:].*$/, ""),  
                "operands": [],
            }
        ];
    
break;
case 15:

        $$[$0-3] = $$[$0-3].toLowerCase();
        this.$ = [
            {  
                "do": $$[$0-3].replace(/^[^.]*[:]/, ""),  
                "module": $$[$0-3].replace(/[:].*$/, ""),  
                "operands": $$[$0-1],
            }
        ];
    
break;
case 16:
 this.$ = [
        {
            "create-scene": $$[$0-3],
            "parameters": [],
            "begin-end": $$[$0-1]
        }
    ]; 
break;
case 17:
 this.$ = [
        {
            "create-scene": $$[$0-6],
            "parameters": [ { variable: $$[$0-4] }, ],
            "begin-end": $$[$0-1]
        }
    ]; 
break;
case 18:
 this.$ = [ {
            "let": "$" + $$[$0-2], // sigh
            "rhs": $$[$0],
        } ]; 
    
break;
case 19:
 this.$ = [
        {
            "create-trigger": $$[$0-5],
            "store": "things",
            "triggers": [],
            "where": $$[$0-3],
            "begin-end": $$[$0-1],
        }
    ]; 
break;
case 20:
 this.$ = [
        {
            "create-trigger": $$[$0-7],
            "store": $$[$0-3],
            "triggers": [],
            "where": $$[$0-5],
            "begin-end": $$[$0-1],
        }
    ]; 
break;
case 21:

        this.$ = [
            {
                "create-model": $$[$0-3],
                "model-values": $$[$0-1],
                "attributes": $$[$0],
            }
        ];
    
break;
case 22:

        this.$ = [
            {
                "create-model": $$[$0-2],
                "model-values": $$[$0],
                "attributes": [],
            }
        ];
    
break;
case 23:

        this.$ = [
            {
                "connect-model": $$[$0],
                "model-values": [],
                "attributes": [],
            }
        ];
    
break;
case 24:

        this.$ = [
            {
                "connect-model": $$[$0-2],
                "model-values": $$[$0],
                "attributes": [],
            }
        ];
    
break;
case 25: case 59: case 70:
 this.$ = []; 
break;
case 26:

        $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
    
break;
case 27:

        this.$ = [ $$[$0] ];
    
break;
case 28:

        this.$ = {
            "attribute": $$[$0-2],
            "attribute-values": $$[$0],
        };
    
break;
case 29:
 if ($$[$0] !== undefined) { $$[$0-2].push($$[$0]) }; this.$ = $$[$0-2]; 
break;
case 30: case 41: case 45: case 60: case 71:
 this.$ = [ $$[$0] ]; 
break;
case 31:
 this.$ = $$[$0] 
break;
case 32:
 $$[$0-2].column = $$[$0]; this.$ = $$[$0-2]; 
break;
case 33:
 this.$ = {
        "compute": {
            "operation": $$[$0-3],
            "star": true,
            "join": "function",
        }
      }
    
break;
case 34:
 this.$ = {
        "compute": {
            "operation": $$[$0-5],
            "star": true,
        },
        "column": $$[$0],    // want to rename to "as"
      }
    
break;
case 35:

        this.$ = {
            select_all: true,
        };
    
break;
case 37:
 this.$ = {
        "band": $$[$0].replace(/[:].*$/, ""),  
        "all": true,
        };
    
break;
case 39:

        this.$ = {
            "band": $$[$0].replace(/[:].*$/, ""),  
            "selector": $$[$0].replace(/^[^.]*[:]/, ""),  
        };
    
break;
case 40: case 44:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 42: case 43: case 47: case 48:

        this.$ = {
            lhs: $$[$0-2],
            rhs: $$[$0],
            assign: $$[$0-1],
        };
    
break;
case 46:

        this.$ = {
            lhs: {
                "band": "",
                "selector": $$[$0-2],
            },
            rhs: $$[$0],
            assign: $$[$0-1],
        };
    
break;
case 49:
 this.$ = {  
            "compute": {
                "operation": $$[$0-1],
                "operands": [ $$[$0], ],
                "join": "left",
            }
        };
    
break;
case 50: case 51: case 52:
 this.$ = {  
            "compute": {
                "operation": $$[$0-1],
                "operands": [ $$[$0-2], $$[$0] ],
                "join": "middle",
            }
        };
    
break;
case 53: case 63:
 this.$ = {  
            "compute": {
                "operation": $$[$0-3],
                "operands": $$[$0-1],
                "join": "function",
            }
        };
    
break;
case 54: case 64:
 this.$ = {  
            "compute": {
                "module": $$[$0-3].band,
                "operation": $$[$0-3].selector,
                "operands": $$[$0-1],
                "join": "function",
            }
        };
    
break;
case 55: case 65:
 this.$ = $$[$0-1]; 
break;
case 58: case 68:

        var selector = null;
        if ($$[$0] === "%") {
            selector = 'math.fraction.percent';
        } else if ($$[$0] === "°C") {
            selector = 'temperature.si.celsius';
        } else if ($$[$0] === "°F") {
            selector = 'temperature.imperial.fahrenheit';
        } else if ($$[$0] === "°K") {
            selector = 'temperature.si.kelvin';
        }

        this.$ = {
            "compute": {
                "operation": "unit",
                "operands": [
                    $$[$0-1],
                    {
                        band: "iot-unit",
                        selector: selector,
                    },
                ],
                "join": "function",
            },
        };
    
break;
case 61: case 72:
 $$[$0].splice(0, 0, $$[$0-2]); this.$ = $$[$0]; 
break;
case 62:
 this.$ = {  
            "named": {
                "key": $$[$0-2],
                "value": $$[$0],
            }
        };
    
break;
case 69:

        this.$ = {
            "list": $$[$0-1]
        }
    
break;
case 73:
 this.$ = $$[$0]; 
break;
case 74:
 this.$ = { "actual": Number.parseInt($$[$0]) }; 
break;
case 75:
 this.$ = { "actual": Number.parseFloat($$[$0]) }; 
break;
case 76: case 77:
 this.$ = { "actual": eval($$[$0]) }; 
break;
case 78:
 this.$ = { "actual": null }; 
break;
case 79:
 this.$ = { "id": true }; 
break;
case 80:

        var match = $$[$0].match(/^([$][^$]+)([$]([^:]+)(:(.+$))?)?/);
        this.$ = { 
            "variable": {
                "complete": $$[$0],
                "variable": match[1],
                "band": match[3],
                "selector": match[5],
            },
        };
    
break;
}
},
table: [o([5,7],$V0,{3:1,4:2,6:3,8:$V1,14:$V2,16:$V3,17:$V4,22:$V5,25:$V6,27:$V7,28:$V8,31:$V9}),{1:[3]},{5:[1,13]},o($Va,[2,3],{7:[1,14]}),o($Vb,$Vc,{9:15,36:16,37:17,13:21,41:23,48:25,49:26,11:$Vd,18:$Ve,21:$Vf,39:$Vg,40:$Vh,45:$Vi,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq}),{15:36,21:$Vf,41:38,42:37},{11:[1,39]},{11:[1,40],21:[1,41]},{11:[1,42]},{11:[1,43]},{11:[1,44]},{11:[1,45]},{11:[1,46]},{1:[2,1]},o($Vr,$V0,{6:3,4:47,8:$V1,14:$V2,16:$V3,17:$V4,22:$V5,25:$V6,27:$V7,28:$V8,31:$V9}),o($Vr,[2,4],{10:[1,48],12:[1,49],35:[1,50]}),o($Vs,[2,30]),o($Vs,[2,31],{38:[1,51]}),{18:[1,52]},o($Vs,[2,35]),o($Vb,[2,37]),o($Vb,[2,38],{26:$Vt,46:$Vu,47:$Vv}),{11:$Vw,13:56,18:$Ve,21:$Vf,41:23,45:$Vi,48:25,49:26,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},o($Vx,$Vy,{18:[1,58]}),{11:$Vw,13:59,18:$Ve,21:$Vf,41:23,45:$Vi,48:25,49:26,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},o($Vz,[2,56]),o($Vz,[2,57],{50:[1,60]}),o([5,7,10,12,18,20,23,24,26,34,35,38,43,46,47,50,54],[2,39]),{11:$Vw,13:62,18:$Ve,21:$Vf,41:23,45:$Vi,48:25,49:26,52:61,53:$Vj,54:$VA,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},o($Vx,[2,74]),o($Vx,[2,75]),o($Vx,[2,76]),o($Vx,[2,77]),o($Vx,[2,78]),o($Vx,[2,79]),o($Vx,[2,80]),o($Vr,[2,8],{12:[1,63],35:$VB}),o($VC,[2,41]),{26:[1,65],43:[1,66]},{14:[1,67]},o($Vr,[2,12],{18:[1,68]}),o($Vr,[2,14],{18:[1,69]}),{18:[1,71],23:[1,70]},{26:[1,72]},{12:[1,73]},{29:[1,74]},o($Vr,[2,23],{29:[1,75]}),o($Va,[2,2]),{11:[1,76]},{11:$Vw,13:77,18:$Ve,21:$Vf,41:23,45:$Vi,48:25,49:26,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},o($Vb,$Vc,{37:17,13:21,41:23,48:25,49:26,36:78,11:$Vd,18:$Ve,21:$Vf,39:$Vg,40:$Vh,45:$Vi,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq}),{11:[1,79]},{11:$VD,18:$VE,19:81,20:$VF,21:$Vf,39:[1,80],41:84,48:86,49:87,51:82,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},{11:$Vw,13:88,18:$Ve,21:$Vf,41:23,45:$Vi,48:25,49:26,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},{11:$Vw,13:89,18:$Ve,21:$Vf,41:23,45:$Vi,48:25,49:26,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},{11:$Vw,13:90,18:$Ve,21:$Vf,41:23,45:$Vi,48:25,49:26,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},o($Vz,[2,49]),{18:[1,91]},{11:$VD,18:$VE,19:92,20:$VF,21:$Vf,41:84,48:86,49:87,51:82,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},{20:[1,93],26:$Vt,46:$Vu,47:$Vv},o($Vz,[2,58]),{54:[1,94]},o($VG,[2,71],{26:$Vt,35:[1,95],46:$Vu,47:$Vv}),{11:$Vw,13:96,18:$Ve,21:$Vf,41:23,45:$Vi,48:25,49:26,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},{21:$Vf,41:38,42:97},{11:$Vw,13:98,18:$Ve,21:$Vf,41:23,45:$Vi,48:25,49:26,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},{11:$Vw,13:99,18:$Ve,21:$Vf,41:23,45:$Vi,48:25,49:26,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},{15:100,21:$Vf,41:38,42:37},{11:$VD,18:$VE,19:101,20:$VF,21:$Vf,41:84,48:86,49:87,51:82,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},{11:$VD,18:$VE,19:102,20:$VF,21:$Vf,41:84,48:86,49:87,51:82,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},o($VH,$V0,{6:3,4:103,8:$V1,14:$V2,16:$V3,17:$V4,22:$V5,25:$V6,27:$V7,28:$V8,31:$V9}),{11:[1,104]},{11:$Vw,13:105,18:$Ve,21:$Vf,41:23,45:$Vi,48:25,49:26,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},{11:$Vw,13:106,18:$Ve,21:$Vf,41:23,45:$Vi,48:25,49:26,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},{15:107,21:$Vf,41:38,42:37},{11:$VI,21:$Vf,32:108,41:111,44:109},o($Vr,[2,5],{12:[1,112]}),o($Vr,[2,6],{26:$Vt,46:$Vu,47:$Vv}),o($Vs,[2,29]),o($Vs,[2,32]),{20:[1,113]},{20:[1,114]},{20:[2,60],35:[1,115]},{18:[1,117],26:[1,116]},o([20,35,50],$Vy,{18:[1,118]}),{11:$Vw,13:119,18:$Ve,21:$Vf,41:23,45:$Vi,48:25,49:26,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},o($VJ,[2,66]),o($VJ,[2,67],{50:[1,120]}),o([5,7,10,12,20,23,24,34,35,38,46,47,54],[2,50],{26:$Vt}),o($Vz,[2,51]),o([5,7,10,12,20,23,24,34,35,38,47,54],[2,52],{26:$Vt,46:$Vu}),{11:$VD,18:$VE,19:81,20:$VF,21:$Vf,41:84,48:86,49:87,51:82,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},{20:[1,121]},o($Vz,[2,55]),o($Vz,[2,69]),o($VG,$VA,{41:23,48:25,49:26,13:62,52:122,11:$Vw,18:$Ve,21:$Vf,45:$Vi,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq}),o($Vr,[2,10],{26:$Vt,46:$Vu,47:$Vv}),o($VC,[2,40]),o($VC,[2,42],{26:$Vt,46:$Vu,47:$Vv}),o($VC,[2,43],{26:$Vt,46:$Vu,47:$Vv}),o($Vr,[2,9],{12:[1,123],35:$VB}),{20:[1,124]},{20:[1,125]},{24:[1,126]},{20:[1,127]},o($Vr,[2,18],{26:$Vt,46:$Vu,47:$Vv}),{10:[1,129],23:[1,128],26:$Vt,46:$Vu,47:$Vv},o($Vr,[2,22],{30:130,33:131,34:$VK,35:$VB}),o($Vr,[2,24],{35:[1,133]}),o($VL,[2,45]),{26:[1,134]},{26:[1,135],43:[1,136]},{11:$Vw,13:137,18:$Ve,21:$Vf,41:23,45:$Vi,48:25,49:26,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},o($Vs,[2,33],{38:[1,138]}),o($Vz,[2,53]),{11:$VD,18:$VE,19:139,20:$VF,21:$Vf,41:84,48:86,49:87,51:82,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},{11:$VD,18:$VE,21:$Vf,41:84,48:86,49:87,51:140,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},{11:$Vw,13:62,18:$Ve,20:$VA,21:$Vf,41:23,45:$Vi,48:25,49:26,52:141,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},{11:$Vw,13:62,18:$Ve,20:$VA,21:$Vf,41:23,45:$Vi,48:25,49:26,52:142,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},{20:[1,143],26:$Vt,46:$Vu,47:$Vv},o($VJ,[2,68]),o($Vz,[2,54]),o($VG,[2,72]),{11:$Vw,13:144,18:$Ve,21:$Vf,41:23,45:$Vi,48:25,49:26,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},o($Vr,[2,13]),o($Vr,[2,15]),o($Vr,[2,16]),{23:[1,145]},o($VH,$V0,{6:3,4:146,8:$V1,14:$V2,16:$V3,17:$V4,22:$V5,25:$V6,27:$V7,28:$V8,31:$V9}),{11:[1,147]},o($Vr,[2,21],{33:148,34:$VK}),o($VM,[2,27]),{11:[1,149]},{11:$VI,21:$Vf,41:111,44:150},{11:$Vw,13:151,18:$Ve,21:$Vf,41:23,45:$Vi,48:25,49:26,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},{11:$Vw,13:152,18:$Ve,21:$Vf,41:23,45:$Vi,48:25,49:26,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},{11:$Vw,13:153,18:$Ve,21:$Vf,41:23,45:$Vi,48:25,49:26,53:$Vj,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq},o($Vr,[2,7],{26:$Vt,46:$Vu,47:$Vv}),{11:[1,154]},{20:[2,61]},o($VJ,[2,62]),{20:[1,155]},{20:[1,156]},o($VJ,[2,65]),o($Vr,[2,11],{26:$Vt,46:$Vu,47:$Vv}),o($VH,$V0,{6:3,4:157,8:$V1,14:$V2,16:$V3,17:$V4,22:$V5,25:$V6,27:$V7,28:$V8,31:$V9}),{24:[1,158]},{23:[1,159]},o($VM,[2,26]),{29:[1,160]},o($VL,[2,44]),o($VL,[2,46],{26:$Vt,46:$Vu,47:$Vv}),o($VL,[2,47],{26:$Vt,46:$Vu,47:$Vv}),o($VL,[2,48],{26:$Vt,46:$Vu,47:$Vv}),o($Vs,[2,34]),o($VJ,[2,63]),o($VJ,[2,64]),{24:[1,161]},o($Vr,[2,19]),o($VH,$V0,{6:3,4:162,8:$V1,14:$V2,16:$V3,17:$V4,22:$V5,25:$V6,27:$V7,28:$V8,31:$V9}),{15:163,21:$Vf,41:38,42:37},o($Vr,[2,17]),{24:[1,164]},o($VM,[2,28],{35:$VB}),o($Vr,[2,20])],
defaultActions: {13:[2,1],139:[2,61]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 22
break;
case 1:return 27
break;
case 2:return 28
break;
case 3:return 31
break;
case 4:/* skip whitespace */
break;
case 5:/* skip comments */
break;
case 6:return 56
break;
case 7:return 56
break;
case 8:return 55
break;
case 9:return 57
break;
case 10:return 57
break;
case 11:return 5
break;
case 12:return ':'
break;
case 13:return 7
break;
case 14:return 35
break;
case 15:return 18
break;
case 16:return 20
break;
case 17:return 53
break;
case 18:return 54
break;
case 19:return 60
break;
case 20:return 17
break;
case 21:return 59
break;
case 22:return 8
break;
case 23:return 38
break;
case 24:return 12
break;
case 25:return 14
break;
case 26:return 16
break;
case 27:return 10
break;
case 28:return 23
break;
case 29:return 24
break;
case 30:return 25
break;
case 31:return 29
break;
case 32:return 34
break;
case 33:return 58
break;
case 34:return 58
break;
case 35:return 26
break;
case 36:return 50
break;
case 37:return 50
break;
case 38:return 50
break;
case 39:return 50
break;
case 40:return 43
break;
case 41:return 43
break;
case 42:return 46
break;
case 43:return 46
break;
case 44:return 46
break;
case 45:return 46
break;
case 46:return 46
break;
case 47:return 46
break;
case 48:return 46
break;
case 49:return 46
break;
case 50:return 46
break;
case 51:return 47
break;
case 52:return 47
break;
case 53:return 45
break;
case 54:return 61
break;
case 55:return 61
break;
case 56:return 61
break;
case 57:return 21
break;
case 58:return 21
break;
case 59:return 40
break;
case 60:return 11
break;
case 61:return 61
break;
case 62:return 39;
break;
}
},
rules: [/^(?:CREATE\s+SCENE\b)/i,/^(?:CREATE\s+TRIGGER\b)/i,/^(?:CREATE\s+MODEL\b)/i,/^(?:CONNECT\s+MODEL\b)/i,/^(?:\s+)/i,/^(?:[-][-].*)/i,/^(?:0\b)/i,/^(?:[-]?[0-9]+\.[0-9]+\b)/i,/^(?:[-]?[1-9][0-9]*\b)/i,/^(?:"(\\.|[^"])*")/i,/^(?:'(\\.|[^'])*')/i,/^(?:$)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:id\b)/i,/^(?:DO\b)/i,/^(?:NULL\b)/i,/^(?:SELECT\b)/i,/^(?:AS\b)/i,/^(?:WHERE\b)/i,/^(?:SET\b)/i,/^(?:UPDATE\b)/i,/^(?:FROM\b)/i,/^(?:BEGIN\b)/i,/^(?:END\b)/i,/^(?:LET\b)/i,/^(?:WITH\b)/i,/^(?:ATTRIBUTE\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:=)/i,/^(?:%)/i,/^(?:°C\b)/i,/^(?:°F\b)/i,/^(?:°K\b)/i,/^(?:&=)/i,/^(?:\|=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:NOT IN\b)/i,/^(?:IN\b)/i,/^(?:&)/i,/^(?:\|)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:!)/i,/^(?:[$][_a-zA-Z][-_a-zA-Z0-9]*[$][_a-zA-Z][-_a-zA-Z0-9]*([:][_a-zA-Z][-_a-zA-Z0-9]*[:][_a-zA-Z][-_a-zA-Z0-9]+))/i,/^(?:[$][_a-zA-Z][-_a-zA-Z0-9]*[$][_a-zA-Z][-_a-zA-Z0-9]*[:]([_a-zA-Z][-_a-zA-Z0-9]*)([.][_a-zA-Z][-_a-zA-Z0-9]*)*)/i,/^(?:[$][_a-zA-Z][-_a-zA-Z0-9]*[$]id\b)/i,/^(?:[_a-zA-Z][-_a-zA-Z0-9]*([:][_a-zA-Z][-_a-zA-Z0-9]*[:][_a-zA-Z][-_a-zA-Z0-9]+))/i,/^(?:[_a-zA-Z][-_a-zA-Z0-9]*[:]([_a-zA-Z][-_a-zA-Z0-9]*)([.][_a-zA-Z][-_a-zA-Z0-9]*)*)/i,/^(?:[_a-zA-Z][-_a-zA-Z0-9]*([:][*]))/i,/^(?:[_a-zA-Z][-_a-zA-Z0-9]*)/i,/^(?:[$][_a-zA-Z][-_a-zA-Z0-9]*)/i,/^(?:\*)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}